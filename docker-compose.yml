version: "3.9"

x-environment: &oncall-environment
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: ${DOMAIN}
  SECRET_KEY: ${ONCALL_SECRET_KEY}
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: "True"
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000
  GRAFANA_CLOUD_ONCALL_API_URL: https://oncall-prod-eu-west-0.grafana.net/oncall

services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: grafana-oncall-app
      GF_INSTALL_PLUGINS: grafana-oncall-app
    networks:
      - monitoring_network
    volumes:
      - grafana_data:/var/lib/grafana

  engine:
    image: grafana/oncall
    container_name: engine
    restart: always
    ports:
      - "8080:8080"
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    networks:
      - monitoring_network
    volumes:
      - oncall_data:/var/lib/oncall
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      redis:
        condition: service_healthy

  celery:
    image: grafana/oncall
    container_name: celery
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    networks:
      - monitoring_network
    volumes:
      - oncall_data:/var/lib/oncall
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: redis:7.0.5
    container_name: redis
    restart: always
    expose:
      - 6379
    networks:
      - monitoring_network
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - monitoring_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring_network
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/prometheus.rules.yml:/etc/prometheus/prometheus.rules.yml
      - prometheus_data:/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring_network
    volumes:
      - ./configs/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command: --config.file=/etc/alertmanager/alertmanager.yml

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    volumes:
      - ./configs/telegraf.conf:/etc/telegraf/telegraf.conf
    ports:
      - "9273:9273"
    networks:
      - monitoring_network

  node_exporter_1:
    image: prom/node-exporter
    container_name: node_exporter_1
    ports:
      - "8081:9100"
    networks:
      - monitoring_network
    volumes:
      - ./textfile-metrics:/textfile-metrics
      - ./update-metrics.sh:/update-metrics.sh
    command:
      [
        "--web.listen-address=:9100",
        "--collector.textfile.directory=textfile-metrics",
      ]

  node_exporter_2:
    image: prom/node-exporter
    container_name: node_exporter_2
    ports:
      - "8082:9100"
    networks:
      - monitoring_network
    command: ["--web.listen-address=:9100"]

  node_exporter_3:
    image: prom/node-exporter
    container_name: node_exporter_3
    ports:
      - "8083:9100"
    networks:
      - monitoring_network
    command: ["--web.listen-address=:9100"]

  mssql_server:
    image: mcr.microsoft.com/mssql/server
    container_name: sql_2019
    environment:
      MSSQL_SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: Y
      MSSQL_PID: Evaluation
    networks:
      - monitoring_network
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
      - ./sql-scripts:/scripts

  sql_exporter:
    image: burningalchemist/sql_exporter
    container_name: sql_exporter
    ports:
      - "9399:9399"
    environment:
      MSSQL_SA_PASSWORD: ${SA_PASSWORD}
    volumes:
      - ./configs/sql-exporter.yml:/etc/sql-exporter/sql-exporter.yml
    networks:
      - monitoring_network
    command: --config.file=/etc/sql-exporter/sql-exporter.yml

  mssql_exporter:
    image: awaragi/prometheus-mssql-exporter
    container_name: mssql_exporter
    ports:
      - "4000:4000"
    environment:
      USERNAME: ${SQL_USERNAME}
      PASSWORD: ${SQL_PASSWORD}
      SERVER: ${SQL_SERVER_NUMBER}

# Bridge is one of the built-in network drivers from Docker
# Private internal networks isolated from the host network and other bridge networks
networks:
  monitoring_network:
    driver: bridge

volumes:
  grafana_data:
  prometheus_data:
  mssql_data:
  oncall_data:
  redis_data:
